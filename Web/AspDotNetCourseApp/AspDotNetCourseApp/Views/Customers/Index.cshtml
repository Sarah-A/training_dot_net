@model List<AspDotNetCourseApp.Models.Customer>

@{
	ViewBag.Title = "Index";
	Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="row my-3 justify-content-end">
	<a role="button" href=@Url.Action("CustomerForm", "Customers") class="btn btn-outline-primary">Add New Customer</a>
</div>

@if (Model.Count == 0)
{
	<text>No Customers in the system!</text>
}
else
{
	<table id="customers" class="table">
		<thead>
			<tr>
				<th scope="col">Name</th>
				<th scope="col">Membership Type</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var customer in Model)
			{
				<tr class="tr-customer">
					<td>
						@Html.ActionLink(customer.Name,
										"Edit",
										"Customers",
										new { id = customer.Id },
										new { @class="list-group-item list-group-item-action border-0"}
						)
					</td>
					<td>
						@customer.MembershipType.Name
					</td>
					<td>
						<button class="btn btn-link js-delete" data-customer-id="@customer.Id">Delete</button>
					</td>
				</tr>
			}
		</tbody>
	</table>
}

@section scripts
{
	<script>

		function onDeleteMovie(btnElement) {
			if (confirm("Are you sure you want to delete this customer?")) {
				$.ajax({
					url: "/api/customers/" + btnElement.attr("data-customer-id"),
					method: "DELETE"
				})
				.done(function () {
					btnElement.parents(".tr-customer").remove();
				});
			}
		}

		$(document).ready(function () {
			// Setting the handler on the parent instead of on the buttons themselfs improve performance
			// and footprint since there will only be one handler. If the selector is true, the callback function
			// will be called.
			$("#customers").on("click",".js-delete", function() {				
				onDeleteMovie($(this));
			});
		});
	</script>
} 

